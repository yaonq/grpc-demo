// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnaryInterceptorClient is the client API for UnaryInterceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryInterceptorClient interface {
	GetValue(ctx context.Context, in *UnaryInterceptorRequest, opts ...grpc.CallOption) (*UnaryInterceptorResponse, error)
}

type unaryInterceptorClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryInterceptorClient(cc grpc.ClientConnInterface) UnaryInterceptorClient {
	return &unaryInterceptorClient{cc}
}

func (c *unaryInterceptorClient) GetValue(ctx context.Context, in *UnaryInterceptorRequest, opts ...grpc.CallOption) (*UnaryInterceptorResponse, error) {
	out := new(UnaryInterceptorResponse)
	err := c.cc.Invoke(ctx, "/proto.unaryInterceptor/getValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryInterceptorServer is the server API for UnaryInterceptor service.
// All implementations must embed UnimplementedUnaryInterceptorServer
// for forward compatibility
type UnaryInterceptorServer interface {
	GetValue(context.Context, *UnaryInterceptorRequest) (*UnaryInterceptorResponse, error)
	mustEmbedUnimplementedUnaryInterceptorServer()
}

// UnimplementedUnaryInterceptorServer must be embedded to have forward compatible implementations.
type UnimplementedUnaryInterceptorServer struct {
}

func (UnimplementedUnaryInterceptorServer) GetValue(context.Context, *UnaryInterceptorRequest) (*UnaryInterceptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedUnaryInterceptorServer) mustEmbedUnimplementedUnaryInterceptorServer() {}

// UnsafeUnaryInterceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryInterceptorServer will
// result in compilation errors.
type UnsafeUnaryInterceptorServer interface {
	mustEmbedUnimplementedUnaryInterceptorServer()
}

func RegisterUnaryInterceptorServer(s grpc.ServiceRegistrar, srv UnaryInterceptorServer) {
	s.RegisterService(&UnaryInterceptor_ServiceDesc, srv)
}

func _UnaryInterceptor_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryInterceptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryInterceptorServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.unaryInterceptor/getValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryInterceptorServer).GetValue(ctx, req.(*UnaryInterceptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryInterceptor_ServiceDesc is the grpc.ServiceDesc for UnaryInterceptor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryInterceptor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.unaryInterceptor",
	HandlerType: (*UnaryInterceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getValue",
			Handler:    _UnaryInterceptor_GetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/unary.proto",
}
